import {
  Group,
  require_classnames
} from "./chunk-JSB4Z2FP.js";
import {
  require_prop_types
} from "./chunk-UTT7NBKT.js";
import {
  require_react
} from "./chunk-WQMOH32Y.js";
import {
  __toESM
} from "./chunk-5WWUZCGV.js";

// node_modules/@visx/heatmap/esm/heatmaps/HeatmapCircle.js
var import_prop_types = __toESM(require_prop_types());
var import_react = __toESM(require_react());
var import_classnames = __toESM(require_classnames());
var _excluded = ["className", "top", "left", "data", "gap", "radius", "xScale", "yScale", "colorScale", "opacityScale", "bins", "count", "children"];
function _extends() {
  _extends = Object.assign ? Object.assign.bind() : function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends.apply(this, arguments);
}
function _objectWithoutPropertiesLoose(source, excluded) {
  if (source == null)
    return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;
  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0)
      continue;
    target[key] = source[key];
  }
  return target;
}
function HeatmapCircle(_ref) {
  var className = _ref.className, top = _ref.top, left = _ref.left, _ref$data = _ref.data, data = _ref$data === void 0 ? [] : _ref$data, _ref$gap = _ref.gap, gap = _ref$gap === void 0 ? 1 : _ref$gap, _ref$radius = _ref.radius, radius = _ref$radius === void 0 ? 6 : _ref$radius, xScale = _ref.xScale, yScale = _ref.yScale, _ref$colorScale = _ref.colorScale, colorScale = _ref$colorScale === void 0 ? function() {
    return void 0;
  } : _ref$colorScale, _ref$opacityScale = _ref.opacityScale, opacityScale = _ref$opacityScale === void 0 ? function() {
    return 1;
  } : _ref$opacityScale, _ref$bins = _ref.bins, bins = _ref$bins === void 0 ? function(column) {
    return column == null ? void 0 : column.bins;
  } : _ref$bins, _ref$count = _ref.count, count = _ref$count === void 0 ? function(cell) {
    return cell == null ? void 0 : cell.count;
  } : _ref$count, children = _ref.children, restProps = _objectWithoutPropertiesLoose(_ref, _excluded);
  var innerRadius = radius - gap;
  var heatmap = data.map(function(columnDatum, column) {
    var x = xScale(column);
    return bins(columnDatum).map(function(bin, row) {
      var countValue = count(bin);
      return {
        bin,
        row,
        column,
        datum: columnDatum,
        radius,
        gap,
        count: countValue,
        cx: radius + x,
        cy: yScale(row) + gap + radius,
        r: innerRadius,
        opacity: opacityScale(countValue),
        color: colorScale(countValue)
      };
    });
  });
  if (children)
    return import_react.default.createElement(import_react.default.Fragment, null, children(heatmap));
  return import_react.default.createElement(Group, {
    className: "visx-heatmap-circles",
    top,
    left
  }, heatmap.map(function(columns) {
    return columns.map(function(bin) {
      return import_react.default.createElement("circle", _extends({
        key: "heatmap-tile-circle-" + bin.row + "-" + bin.column,
        className: (0, import_classnames.default)("visx-heatmap-circle", className),
        r: bin.r,
        cx: bin.cx,
        cy: bin.cy,
        fill: bin.color,
        fillOpacity: bin.opacity
      }, restProps));
    });
  }));
}
HeatmapCircle.propTypes = {
  data: import_prop_types.default.array,
  left: import_prop_types.default.number,
  top: import_prop_types.default.number,
  gap: import_prop_types.default.number,
  radius: import_prop_types.default.number,
  xScale: import_prop_types.default.func.isRequired,
  yScale: import_prop_types.default.func.isRequired,
  bins: import_prop_types.default.func,
  count: import_prop_types.default.func,
  className: import_prop_types.default.string,
  children: import_prop_types.default.func
};

// node_modules/@visx/heatmap/esm/heatmaps/HeatmapRect.js
var import_prop_types2 = __toESM(require_prop_types());
var import_react2 = __toESM(require_react());
var import_classnames2 = __toESM(require_classnames());
var _excluded2 = ["className", "top", "left", "data", "binWidth", "binHeight", "x0", "gap", "xScale", "yScale", "colorScale", "opacityScale", "bins", "count", "children"];
function _extends2() {
  _extends2 = Object.assign ? Object.assign.bind() : function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends2.apply(this, arguments);
}
function _objectWithoutPropertiesLoose2(source, excluded) {
  if (source == null)
    return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;
  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0)
      continue;
    target[key] = source[key];
  }
  return target;
}
function HeatmapRect(_ref) {
  var className = _ref.className, top = _ref.top, left = _ref.left, _ref$data = _ref.data, data = _ref$data === void 0 ? [] : _ref$data, _ref$binWidth = _ref.binWidth, binWidth = _ref$binWidth === void 0 ? 6 : _ref$binWidth, _ref$binHeight = _ref.binHeight, binHeight = _ref$binHeight === void 0 ? 6 : _ref$binHeight, _ref$x = _ref.x0, x0 = _ref$x === void 0 ? 0 : _ref$x, _ref$gap = _ref.gap, gap = _ref$gap === void 0 ? 1 : _ref$gap, xScale = _ref.xScale, yScale = _ref.yScale, _ref$colorScale = _ref.colorScale, colorScale = _ref$colorScale === void 0 ? function() {
    return void 0;
  } : _ref$colorScale, _ref$opacityScale = _ref.opacityScale, opacityScale = _ref$opacityScale === void 0 ? function() {
    return 1;
  } : _ref$opacityScale, _ref$bins = _ref.bins, bins = _ref$bins === void 0 ? function(d) {
    return d == null ? void 0 : d.bins;
  } : _ref$bins, _ref$count = _ref.count, count = _ref$count === void 0 ? function(d) {
    return d == null ? void 0 : d.count;
  } : _ref$count, children = _ref.children, restProps = _objectWithoutPropertiesLoose2(_ref, _excluded2);
  var width = binWidth - gap;
  var height = binHeight - gap;
  var heatmap = data.map(function(datum, column) {
    var x = xScale(column);
    return bins(datum).map(function(bin, row) {
      var countValue = count(bin);
      return {
        bin,
        row,
        column,
        datum,
        width,
        height,
        gap,
        count: countValue,
        x: x + x0,
        y: yScale(row) + gap,
        color: colorScale(countValue),
        opacity: opacityScale(countValue)
      };
    });
  });
  if (children)
    return import_react2.default.createElement(import_react2.default.Fragment, null, children(heatmap));
  return import_react2.default.createElement(Group, {
    className: "visx-heatmap-rects",
    top,
    left
  }, heatmap.map(function(_bins) {
    return _bins.map(function(bin) {
      return import_react2.default.createElement("rect", _extends2({
        key: "heatmap-tile-rect-" + bin.row + "-" + bin.column,
        className: (0, import_classnames2.default)("visx-heatmap-rect", className),
        width: bin.width,
        height: bin.height,
        x: bin.x,
        y: bin.y,
        fill: bin.color,
        fillOpacity: bin.opacity
      }, restProps));
    });
  }));
}
HeatmapRect.propTypes = {
  data: import_prop_types2.default.array,
  left: import_prop_types2.default.number,
  top: import_prop_types2.default.number,
  binWidth: import_prop_types2.default.number,
  binHeight: import_prop_types2.default.number,
  x0: import_prop_types2.default.number,
  gap: import_prop_types2.default.number,
  xScale: import_prop_types2.default.func.isRequired,
  yScale: import_prop_types2.default.func.isRequired,
  bins: import_prop_types2.default.func,
  count: import_prop_types2.default.func,
  className: import_prop_types2.default.string,
  children: import_prop_types2.default.func
};
export {
  HeatmapCircle,
  HeatmapRect
};
//# sourceMappingURL=@visx_heatmap.js.map
